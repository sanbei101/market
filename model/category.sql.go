// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: category.sql

package model

import (
	"context"
	"encoding/json"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO category (
    name, 
    parent_id, 
    spec_template, 
    sort
) VALUES (
    $1, $2, $3, $4
) RETURNING id, name, parent_id, spec_template, sort, created_at
`

type CreateCategoryParams struct {
	Name         string
	ParentID     pgtype.Int8
	SpecTemplate json.RawMessage
	Sort         int32
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, createCategory,
		arg.Name,
		arg.ParentID,
		arg.SpecTemplate,
		arg.Sort,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ParentID,
		&i.SpecTemplate,
		&i.Sort,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM category WHERE id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteCategory, id)
	return err
}

const getCategory = `-- name: GetCategory :one
SELECT id, name, parent_id, spec_template, sort, created_at FROM category WHERE id = $1
`

func (q *Queries) GetCategory(ctx context.Context, id int64) (Category, error) {
	row := q.db.QueryRow(ctx, getCategory, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ParentID,
		&i.SpecTemplate,
		&i.Sort,
		&i.CreatedAt,
	)
	return i, err
}

const listCategories = `-- name: ListCategories :many
SELECT id, name, parent_id, spec_template, sort, created_at FROM category 
ORDER BY sort ASC, created_at DESC
`

func (q *Queries) ListCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.Query(ctx, listCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ParentID,
			&i.SpecTemplate,
			&i.Sort,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCategoriesByParent = `-- name: ListCategoriesByParent :many
SELECT id, name, parent_id, spec_template, sort, created_at FROM category 
WHERE parent_id = $1
ORDER BY sort ASC, created_at DESC
`

func (q *Queries) ListCategoriesByParent(ctx context.Context, parentID pgtype.Int8) ([]Category, error) {
	rows, err := q.db.Query(ctx, listCategoriesByParent, parentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ParentID,
			&i.SpecTemplate,
			&i.Sort,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE category 
SET 
    name = $1,
    parent_id = $2,
    spec_template = $3,
    sort = $4
WHERE id = $5
RETURNING id, name, parent_id, spec_template, sort, created_at
`

type UpdateCategoryParams struct {
	Name         string
	ParentID     pgtype.Int8
	SpecTemplate json.RawMessage
	Sort         int32
	ID           int64
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, updateCategory,
		arg.Name,
		arg.ParentID,
		arg.SpecTemplate,
		arg.Sort,
		arg.ID,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ParentID,
		&i.SpecTemplate,
		&i.Sort,
		&i.CreatedAt,
	)
	return i, err
}
