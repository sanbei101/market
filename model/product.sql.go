// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: product.sql

package model

import (
	"context"
	"encoding/json"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProductSKU = `-- name: CreateProductSKU :one
INSERT INTO product_sku (
    spu_id, 
    price, 
    stock, 
    specs
) VALUES (
    $1, $2, $3, $4
) RETURNING id, spu_id, price, stock, specs, created_at
`

type CreateProductSKUParams struct {
	SpuID int64
	Price pgtype.Numeric
	Stock int32
	Specs json.RawMessage
}

// ---------------------------------------------------------
func (q *Queries) CreateProductSKU(ctx context.Context, arg CreateProductSKUParams) (ProductSku, error) {
	row := q.db.QueryRow(ctx, createProductSKU,
		arg.SpuID,
		arg.Price,
		arg.Stock,
		arg.Specs,
	)
	var i ProductSku
	err := row.Scan(
		&i.ID,
		&i.SpuID,
		&i.Price,
		&i.Stock,
		&i.Specs,
		&i.CreatedAt,
	)
	return i, err
}

const createProductSPU = `-- name: CreateProductSPU :one
INSERT INTO product_spu (
    name, 
    description, 
    category_id
) VALUES (
    $1, $2, $3
) RETURNING id, name, description, category_id, created_at
`

type CreateProductSPUParams struct {
	Name        string
	Description pgtype.Text
	CategoryID  int64
}

func (q *Queries) CreateProductSPU(ctx context.Context, arg CreateProductSPUParams) (ProductSpu, error) {
	row := q.db.QueryRow(ctx, createProductSPU, arg.Name, arg.Description, arg.CategoryID)
	var i ProductSpu
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CategoryID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteProductSKU = `-- name: DeleteProductSKU :exec
DELETE FROM product_sku WHERE id = $1
`

func (q *Queries) DeleteProductSKU(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteProductSKU, id)
	return err
}

const deleteProductSKUsBySPU = `-- name: DeleteProductSKUsBySPU :exec
DELETE FROM product_sku WHERE spu_id = $1
`

func (q *Queries) DeleteProductSKUsBySPU(ctx context.Context, spuID int64) error {
	_, err := q.db.Exec(ctx, deleteProductSKUsBySPU, spuID)
	return err
}

const deleteProductSPU = `-- name: DeleteProductSPU :exec
DELETE FROM product_spu WHERE id = $1
`

func (q *Queries) DeleteProductSPU(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteProductSPU, id)
	return err
}

const getCategorySpecValues = `-- name: GetCategorySpecValues :many
SELECT 
    jsonb_object_keys(specs) as spec_key,
    specs->>jsonb_object_keys(specs) as spec_value,
    COUNT(*) as sku_count
FROM product_sku sku
JOIN product_spu spu ON sku.spu_id = spu.id
WHERE spu.category_id = $1
GROUP BY spec_key, spec_value
ORDER BY spec_key, sku_count DESC
`

type GetCategorySpecValuesRow struct {
	SpecKey   string
	SpecValue interface{}
	SkuCount  int64
}

func (q *Queries) GetCategorySpecValues(ctx context.Context, categoryID int64) ([]GetCategorySpecValuesRow, error) {
	rows, err := q.db.Query(ctx, getCategorySpecValues, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCategorySpecValuesRow
	for rows.Next() {
		var i GetCategorySpecValuesRow
		if err := rows.Scan(&i.SpecKey, &i.SpecValue, &i.SkuCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductSKU = `-- name: GetProductSKU :one
SELECT id, spu_id, price, stock, specs, created_at FROM product_sku WHERE id = $1
`

func (q *Queries) GetProductSKU(ctx context.Context, id int64) (ProductSku, error) {
	row := q.db.QueryRow(ctx, getProductSKU, id)
	var i ProductSku
	err := row.Scan(
		&i.ID,
		&i.SpuID,
		&i.Price,
		&i.Stock,
		&i.Specs,
		&i.CreatedAt,
	)
	return i, err
}

const getProductSPU = `-- name: GetProductSPU :one
SELECT id, name, description, category_id, created_at FROM product_spu WHERE id = $1
`

func (q *Queries) GetProductSPU(ctx context.Context, id int64) (ProductSpu, error) {
	row := q.db.QueryRow(ctx, getProductSPU, id)
	var i ProductSpu
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CategoryID,
		&i.CreatedAt,
	)
	return i, err
}

const getSPUWithSKUs = `-- name: GetSPUWithSKUs :one
SELECT 
    spu.id, spu.name, spu.description, spu.category_id, spu.created_at,
    jsonb_agg(sku.*) as skus
FROM product_spu spu
LEFT JOIN product_sku sku ON spu.id = sku.spu_id
WHERE spu.id = $1
GROUP BY spu.id
`

type GetSPUWithSKUsRow struct {
	ID          int64
	Name        string
	Description pgtype.Text
	CategoryID  int64
	CreatedAt   pgtype.Timestamp
	Skus        json.RawMessage
}

func (q *Queries) GetSPUWithSKUs(ctx context.Context, id int64) (GetSPUWithSKUsRow, error) {
	row := q.db.QueryRow(ctx, getSPUWithSKUs, id)
	var i GetSPUWithSKUsRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CategoryID,
		&i.CreatedAt,
		&i.Skus,
	)
	return i, err
}

const listProductSKUsBySPU = `-- name: ListProductSKUsBySPU :many
SELECT id, spu_id, price, stock, specs, created_at FROM product_sku 
WHERE spu_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListProductSKUsBySPU(ctx context.Context, spuID int64) ([]ProductSku, error) {
	rows, err := q.db.Query(ctx, listProductSKUsBySPU, spuID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductSku
	for rows.Next() {
		var i ProductSku
		if err := rows.Scan(
			&i.ID,
			&i.SpuID,
			&i.Price,
			&i.Stock,
			&i.Specs,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductSPUs = `-- name: ListProductSPUs :many
SELECT id, name, description, category_id, created_at FROM product_spu 
ORDER BY created_at DESC
`

func (q *Queries) ListProductSPUs(ctx context.Context) ([]ProductSpu, error) {
	rows, err := q.db.Query(ctx, listProductSPUs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductSpu
	for rows.Next() {
		var i ProductSpu
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CategoryID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductSPUsByCategory = `-- name: ListProductSPUsByCategory :many
SELECT id, name, description, category_id, created_at FROM product_spu 
WHERE category_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListProductSPUsByCategory(ctx context.Context, categoryID int64) ([]ProductSpu, error) {
	rows, err := q.db.Query(ctx, listProductSPUsByCategory, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductSpu
	for rows.Next() {
		var i ProductSpu
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CategoryID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchProductsBySpecs = `-- name: SearchProductsBySpecs :many
SELECT 
    sku.id, sku.spu_id, sku.price, sku.stock, sku.specs, sku.created_at,
    spu.name as spu_name,
    spu.description as spu_description
FROM product_sku sku
JOIN product_spu spu ON sku.spu_id = spu.id
WHERE sku.specs @> $1
AND spu.category_id = $2
`

type SearchProductsBySpecsParams struct {
	SpecsFilter json.RawMessage
	CategoryID  int64
}

type SearchProductsBySpecsRow struct {
	ID             int64
	SpuID          int64
	Price          pgtype.Numeric
	Stock          int32
	Specs          json.RawMessage
	CreatedAt      pgtype.Timestamp
	SpuName        string
	SpuDescription pgtype.Text
}

// ---------------------------------------------------------
func (q *Queries) SearchProductsBySpecs(ctx context.Context, arg SearchProductsBySpecsParams) ([]SearchProductsBySpecsRow, error) {
	rows, err := q.db.Query(ctx, searchProductsBySpecs, arg.SpecsFilter, arg.CategoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchProductsBySpecsRow
	for rows.Next() {
		var i SearchProductsBySpecsRow
		if err := rows.Scan(
			&i.ID,
			&i.SpuID,
			&i.Price,
			&i.Stock,
			&i.Specs,
			&i.CreatedAt,
			&i.SpuName,
			&i.SpuDescription,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductSKU = `-- name: UpdateProductSKU :one
UPDATE product_sku 
SET 
    price = $1,
    stock = $2,
    specs = $3
WHERE id = $4
RETURNING id, spu_id, price, stock, specs, created_at
`

type UpdateProductSKUParams struct {
	Price pgtype.Numeric
	Stock int32
	Specs json.RawMessage
	ID    int64
}

func (q *Queries) UpdateProductSKU(ctx context.Context, arg UpdateProductSKUParams) (ProductSku, error) {
	row := q.db.QueryRow(ctx, updateProductSKU,
		arg.Price,
		arg.Stock,
		arg.Specs,
		arg.ID,
	)
	var i ProductSku
	err := row.Scan(
		&i.ID,
		&i.SpuID,
		&i.Price,
		&i.Stock,
		&i.Specs,
		&i.CreatedAt,
	)
	return i, err
}

const updateProductSPU = `-- name: UpdateProductSPU :one
UPDATE product_spu 
SET 
    name = $1,
    description = $2,
    category_id = $3
WHERE id = $4
RETURNING id, name, description, category_id, created_at
`

type UpdateProductSPUParams struct {
	Name        string
	Description pgtype.Text
	CategoryID  int64
	ID          int64
}

func (q *Queries) UpdateProductSPU(ctx context.Context, arg UpdateProductSPUParams) (ProductSpu, error) {
	row := q.db.QueryRow(ctx, updateProductSPU,
		arg.Name,
		arg.Description,
		arg.CategoryID,
		arg.ID,
	)
	var i ProductSpu
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CategoryID,
		&i.CreatedAt,
	)
	return i, err
}
